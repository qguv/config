#!/bin/sh
# configure interactive shell

function __prompt_char() {
    _last_exit=$?

    if [ "$USER_EXPECTED" != "$USER" ]; then
        printf '%%n '
    fi

    if [ $_last_exit -ne 0 ]; then
        printf '!'
    elif ! _in "$PWD" "${GIT_PROMPT_DIRS_BLACKLIST[@]}" && git rev-parse --git-dir >& /dev/null; then
        printf 'Â±'
    elif [ $UID -eq 0 ]; then
        printf '#'
    else
        printf ']'
    fi
}

function __git_prompt() {
    printf ' '

    # ignore blacklisted directories
    _in "$PWD" "${GIT_PROMPT_DIRS_BLACKLIST[@]}" && return

    # ignore non-git directories
    git rev-parse --git-dir >& /dev/null || return

    # unmerged files (red highlight)
    if [ -n "$(git ls-files -u >& /dev/null)" ]; then
        printf '%%F{red}%%S'

    # dirty working dir (red)
    elif ! git diff --quiet >& /dev/null || ! git diff --cached --quiet >& /dev/null; then
        printf '%%F{red}'

    # clean working dir (green)
    else
        printf '%%F{green}'
    fi

    # get branch name or parenthesized message describing where we are
    printf "$(git branch | sed -n '/\* /s:::p')%%f%%s "
}

PS1='$(__prompt_char) '

if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi
PS1='${debian_chroot:+($debian_chroot)}'"$PS1"

if [ -n "$ZSH_VERSION" ]; then
  source "$XDG_CONFIG_HOME/zsh/compinstall"
  source "$XDG_CONFIG_HOME/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
  ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets root)
  source "$XDG_CONFIG_HOME/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
  ZSH_HIGHLIGHT_STYLES[bracket-error]='fg=black,bg=red'
  ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]='underline,bold'

  setopt prompt_subst
  RPS1='%~$(__git_prompt)%F{cyan}%m%f %T'
  autoload bashcompinit
  bashcompinit
  alias _have=hash
  for f in /usr/share/bash-completion/completions/{nordvpn,lxc}; do
    if [ -r "$f" ]; then
        source "$f"
    fi
  done

# bash, most likely
else
  HISTCONTROL=ignoreboth
  HISTSIZE=1000
  HISTFILESIZE=2000

  shopt -s histappend checkwinsize globstar promptvars
  bind -m vi-insert "\C-l":clear-screen
fi

# activate dircolors if installed
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

# activate pyenv if installed
if hash pyenv 2> /dev/null; then
    eval "$(pyenv init -)"
fi

# use vi line-editing keybindings
set -o vi

# detect shellshock bug over ssh
export LC_SHOCKED="() { :;};echo \$'\\033[1;31mTHIS HOST IS SHELL SHOCKED\\033[0m'"

# remind user to set up system aliases
if [ -n "$SYSTEM_ALIASES_NOT_SET_UP" ]; then
  printf "system aliases not set up!\n"
fi

# support for github.com/aykamko/tag
if hash ag 2>/dev/null; then

  export TAG_SEARCH_PROG=ag

  # if tag is installed, add aliases as expected
  if hash tag 2>/dev/null; then
    tag() {
      command tag "$@"
      source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null
    }
    alias ag=tag

  # if tag is not installed, install it
  elif hash go 2>/dev/null; then
    tag() {
      if hash tag 2>/dev/null; then
        command tag "$@"
        source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null
      else
        go get -u github.com/aykamko/tag/...
        go install github.com/aykamko/tag
      fi
    }
  fi
fi

# fix LXD tty bug
if tty -s && [ "$(tty)" = "not a tty" ]; then
  exec script -q /dev/null
fi

if [ -n "$GID_DESIRED" ] && ! [ "$GID" = "$GID_DESIRED" ]; then
    printf "[WARN] Your primary group is \"%s\" which is different than the expected \"%s\"! To switch, run: exec newgrp %s\n" "$GROUP_ORIGINAL" "$GROUP_DESIRED" "$GROUP_DESIRED" >&2
fi

if [ -n "$UMASK_DESIRED" ] && ! [ "$(umask)" = "$UMASK_DESIRED" ]; then
    printf "[WARN] Your umask is %s which is different than the expected %s! To switch, run: umask %s\n" "$UMASK_ORIGINAL" "$UMASK_DESIRED" "$UMASK_DESIRED" >&2
fi

# escaped out of tmux
if [ -z "$TMUX" ] && [ "$TTY_USE_TMUX" = true ]; then
    printf "[DEBUG] Press ^D again to exit.\n" >&2

# list attached tmux sessions
elif ! [ "$TTY_TMUX_SHARED" = true ]; then
    dsids="$(tmux-detached)"
    if [ -n "$dsids" ]; then

        ndsids="$(echo "$dsids" | wc -l)"

        # plural
        if [ "$ndsids" -ne 1 ]; then
            plural='s'
            arg=" [$(printf "$dsids" | tr '\n' '|' | tr -d ':')]"

        # singluar
        else
            ndsids='a'
            plural=''
            arg=''
        fi

        warn_destroy=''
        if [ -n "$TMUX" ]; then
            warn_destroy=" (Note: this will destroy your current session!)"
        fi

        printf "[WARN] You have %s detached tmux session%s! To resume, run: \`tmux-resume%s\`%s\n" \
            "$ndsids" "$plural" "$arg" "$warn_destroy" >&2
    fi
fi
