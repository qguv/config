#!/bin/sh
# shell custom functions

# Combines mkdir, cd, pwd
function md () {
  mkdir -p "$@" &&
  eval cd "\"\$$#\"" &&
  eval echo "Switching to $(pwd)...";
}

# create null pulseaudio sync (for routing audio between applications)
function paloop() {
	if [ -n '$1' ]; then
		pactl load-module module-null-sink "sink_name=$1" "sink_properties=\"device.description='$1'\""
	else
		pactl load-module module-null-sink
	fi
}

# Quickly edit programs in your $PATH
function editex () {
  eval "$EDITOR" "$(which $1)" ${@:2}
}

# Run a locally hosted godoc.org at given port
function hostgodoc () {
  if [ -z $1 ]; then
    PORT="6060"
  else
    PORT="$1"
  fi
  eval "godoc" "-http=:$PORT"
}

function texide () {
  if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Usage:"
    echo "  texide <project-name>"
    echo
    echo "texide will open and render LaTeX projects on the fly in vim, rendering and"
    echo "displaying text each time vim is closed. Use :cq in vim to stop rendering."
    echo
    echo "Do not include an extension on <project-name>. We'll figure it out."
    return 0
  fi

  INFILE="$1"
  TEXFILE="$INFILE.tex"
  DVIFILE="$INFILE.dvi"
  PDFFILE="$INFILE.pdf"

  STATUS=0
  while [ $STATUS -eq 0 ]; do
    vim "$TEXFILE" -c "normal! g\`\""
    let STATUS=$?
    "latex" "$INFILE"
    "bibtex" "$INFILE"
    "latex" "$INFILE"
    "latex" "$INFILE"
    "dvipdf" "$DVIFILE"
    "$OPENCOMMAND" "$PDFFILE"
  done

  return 0
}

function movetotrash() {

  # Filenames will be append with a timestamp
  timestamp=$(date "+%s")

  # You can define your own if you want, but NO TRAILING SLASH
  TRASHDIR="$HOME/.trash"

  if [[ -z "$*" ]] ; then
    echo "Usage: mt [files...]"
    return 2
  fi

  # Test if TRASHDIR exists and proceed with deleting files if it
  # exists. If it does not exist, e.g. after a restart, create the
  # directory and proceed.
  if [ ! -d "$TRASHDIR" ]; then
    mkdir "$TRASHDIR"

    # if unsuccessful, crash
    [ "$?" -eq 0 ] || return 3

    touch "$TRASHDIR/sources"
    echo "$TRASHDIR initialized"
  fi

  # TBD: Do not move every file separately, but
  # mv all files at once... don't know how...
  while [ $# -ne 0 ]; do

    # Scrub input for parts
    filename="$(basename $1)"

    # Make whitespaces underscores
    filename="$(echo $filename | sed 's:\s:_:g')"

    # Append timestamp and combine
    filename="${filename}_$timestamp.tar.xz"
    dest="$TRASHDIR/$filename"

    # Move files to /tmp/trash
    tar cJf "$dest" "$1"
    [ "$?" -eq 0 ] || return 1
    rm -rf "$1"
    echo "$dest"
    echo "$filename:\t$(pwd)/$1" >> "$TRASHDIR/sources"

    shift
  done

  return 0
}

function git-diff-words() {
  git diff --color-words "$@" | fold -s -w "$(stty size | cut -d ' ' -f 2)" | less -R
  return "$?"
}

function git-show-words() {
  git show --color-words "$@" | fold -s -w "$(stty size | cut -d ' ' -f 2)" | less -R
  return "$?"
}

function git-bb-remote() {
  usage="Usage: git bb-remote [-n GIT_REMOTE_NAME] [-u USERNAME] [-o OWNER] [-r REPOSITORY]"

  if [ "$1" = "--help" ]; then
    echo "$usage"
    return 0

  # odd amount of arguments
  elif [ $(( $# % 2 )) -ne 0 ]; then
    echo "$usage"
    return 2
  fi

  remote="origin"
  bbuser="$(whoami)"
  owner="$(whoami)"
  repo="$(basename $(pwd))"

  while (($#)); do
    case "$1" in
      "-n")
        remote="$2"
        ;;
      "-u")
        bbuser="$2"
        ;;
      "-o")
        owner="$2"
        ;;
      "-r")
        repo="$2"
        ;;
      *)
        echo "$usage"
        return 1
    esac
    shift; shift
  done

  git remote add "$remote" "https://${bbuser}@bitbucket.org/${owner}/${repo}"
}

# list git subtrees https://stackoverflow.com/questions/16641057/how-can-i-list-the-git-subtrees-on-the-root#18339297
function git-sub-list() {
   git log | grep git-subtree-dir | tr -d ' ' | cut -d ':' -f2 | sort | uniq | xargs -I {} bash -c 'if [ -d $(git rev-parse --show-toplevel)/{} ] ; then echo {}; fi'
}

function shreddir() {
  while [ $# -ne 0 ]; do
    read -q "ok?Shredding \"$1\" and children, okay? [y/N] "
    echo

    # Y or y end up 'y' with zsh's `read -q`
    if [ "$ok" != "y" ]; then
      echo "Didn't remove $1!"
      return 301
    fi

    find "$1" -type f -execdir shred -fuz '{}' \;

    if [ $? -ne 0 ]; then
      return "$?"
    fi

    rm -rf "$1"

    shift
  done

  return 0
}

function promptloop() {
  if [ -z "$1" ]; then
    echo "promptloop <command>"
    echo "  Run <command> over and over again, asking each time whether to continue."
    return 2
  fi

  while true; do
    "$1"
    laststatus="$?"
    echo -n "\nContinue? [y/N] "
    read -q || break
  done

  echo
  return laststatus
}

function docker-clean() {
  echo "\nRemoving dangling images..."
  docker rmi -f $(docker images -qf 'dangling=true')
  echo "\nRemoving exited containers..."
  docker rm $(docker ps -aq --filter 'status=exited') > /dev/null 2>&1 || echo "No exited containers.\n"
  echo "\nRemoving stale containers..."
  docker rm $(docker ps -aq) > /dev/null 2>&1 || echo "No stale containers.\n"
  echo "\nRemoving intermediate images..."
  docker rmi -f $(docker images -a | grep '<none>' | awk '{print $3}')
  echo "\nAll clean."
}

function chase() {
  mv "$@"
  for lastarg in $@; do :; done
  cd "$lastarg"
}

function somafm() {
  killall mpg123 > /dev/null 2>&1
  if [ "$1" = "stop" ]; then
    return
  fi
  mpg123 -@ "http://somafm.com/startstream=$1.pls" > /dev/null 2>&1 &
}

# remove spaces, then run unquoted lines through fmt, passing arguments along
function mailfmt() {
  eval "sed 's/^>/.>/g' | fmt $@ | sed 's/^.>/>/g' | sed 's/   */ /g'"
}

function osxdocker() {
  docker-machine env default > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    docker-machine create --driver virtualbox default || docker-machine start default
  fi
  eval $(docker-machine env default)
  eval "\\docker $@"
}

function yesno() {
    echo -n "$@ [y/N]"
    old_stty_cfg=$(stty -g)
    stty raw -echo ; answer=$(head -c 1) ; stty $old_stty_cfg # Care playing with stty
    if echo "$answer" | grep -iq "^y" ;then
        return 0
    fi
    return 1
}

function gpg_clean() {
    # Clean up the GPG Keyring.  Keep it tidy.
    # blog.lavall.ee
    echo "Cleaning up the GPG keyring..."

    for expiredKey in $(gpg2 --list-keys | awk '/^pub.* \[expired\: / {id=$2; sub(/^.*\//, "", id); print id}' | fmt -w 999 ); do
        echo
        echo "Found an expired key:"
        echo
        gpg2 --list-key "$expiredKey"
        yesno "Delete it?"
        if [ $? -eq 1 ]; then
            echo " won't delete"
            continue
        fi
        gpg2 --delete-keys "$expiredKey" #batch quiet bitbucket
        if [ $? -eq 0 ]; then
            echo " deleted"
        else
            echo " failed to delete"
            exit 1
        fi
    done

    echo
    echo Verifying key integrity:
    for keyid in $(gpg -k | grep ^pub | grep -v expired: | grep -v revoked: | cut -d/ -f2 | cut -d' ' -f1); do
        echo -n "  $keyid"
        gpg2 --batch --quiet --edit-key $keyid check clean cross-certify save quit > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo " OK"
        else
            echo " FAIL"
        fi
    done

    echo
    echo Updating keys...
    gpg2 --refresh-keys
}

function disable_powersave() {
  xset -dpms
  xset s off
}

function enable_powersave() {
  xset +dpms
  xset s on
}

function aur() {
  for v in "$@"; do
    git clone ssh://aur@aur.archlinux.org/${v}
  done
}

function cslp() {
  ssh_remote="csci"
  remote_dir="/tmp/cslp"

  ssh "$ssh_remote" rm -rf "$remote_dir"
  ssh "$ssh_remote" mkdir  "$remote_dir"

  for local_file in "$@"; do
    remote_file="$remote_dir/$(basename $local_file)"
    scp "$local_file" "$ssh_remote:$remote_file"
    ssh -X "$ssh_remote" "okular --print $remote_file > /dev/null 2>&1"
  done
}

function rchars() {
  if [ -z "$1" ]; then
    echo "printable NUMBER"
    echo "  Spits out some printable characters to the terminal."
    return 2
  fi
  tr -dc "[:graph:]" < /dev/urandom | head -c"$1"
}

function genpasswd() {
  L="$1"
  if [[ "$L" == "" ]]; then
    L=16
  fi
  tr -dc A-Za-z0-9_ < /dev/urandom | head -c "$L" | xargs
}

function gist-edit() {
  mkdir -p /tmp/gist-edit
  TMPFILE="/tmp/gist-edit/$(openssl rand -hex 16)"
  HDRMSG="=== USE :cq TO EXIT WITHOUT UPLOADING ==="
  echo "$HDRMSG" > "$TMPFILE" &&
  gist -f todo.txt -r "$DSTODO" >> "$TMPFILE" &&
  eval "$EDITOR $TMPFILE" &&
  grep -xv "$HDRMSG" "$TMPFILE" | gist -f todo.txt -u "$DSTODO"
  rm -rf /tmp/gist-edit
}

function fingerprint () {
	openssl s_client -connect "$1" < /dev/null 2>/dev/null | openssl x509 -fingerprint -sha1 -noout -in /dev/stdin | tr -d : | cut -d= -f2 | tr 'A-F' 'a-f'
}

udevinfo() {
	udevadm info -a -p "$(udevadm info -q path -n $1)"
}

function update-config-subtrees() {(
    set -e

    echo Updating subtrees...
    git subtree pull --squash --prefix nvim/vim-plug                        https://github.com/junegunn/vim-plug HEAD
    git subtree pull --squash --prefix vim/vundle                           https://github.com/VundleVim/Vundle.vim HEAD
    git subtree pull --squash --prefix weechat/plugins                      https://github.com/weechat/scripts HEAD
    git subtree pull --squash --prefix weechat/community/wee-slack          https://github.com/wee-slack/wee-slack HEAD
    git subtree pull --squash --prefix zsh/plugins/zsh-autosuggestions      https://github.com/zsh-users/zsh-autosuggestions HEAD
    git subtree pull --squash --prefix zsh/plugins/zsh-syntax-highlighting  https://github.com/zsh-users/zsh-syntax-highlighting HEAD
    git subtree pull --squash --prefix kujeger/swayoutputctl                https://gitlab.com/kujeger/swayoutputctl HEAD

    git subtree pull --squash --prefix PulseEffects/community/Digitalone1   https://github.com/Digitalone1/EasyEffects-Presets HEAD
    git subtree pull --squash --prefix PulseEffects/community/JackHack96    https://github.com/JackHack96/EasyEffects-Presets HEAD
    git subtree pull --squash --prefix PulseEffects/community/rkdhanda      https://github.com/rkdhanda/PulseEffects-Preset HEAD
    echo Subtrees updated

    sh PulseEffects/community/install.sh clean
    sh PulseEffects/community/install.sh
)}

eag () {
  eval "$EDITOR '+:Ack $@'"
}

function pretend_usa () {
  export LANG=en_US.UTF-8
  export LC_CTYPE="en_US.UTF-8"
  export LC_NUMERIC=en_US.UTF-8
  export LC_TIME=en_US.UTF-8
  export LC_COLLATE="en_US.UTF-8"
  export LC_MONETARY=en_US.UTF-8
  export LC_MESSAGES="en_US.UTF-8"
  export LC_PAPER=en_US.UTF-8
  export LC_NAME="en_US.UTF-8"
  export LC_ADDRESS="en_US.UTF-8"
  export LC_TELEPHONE="en_US.UTF-8"
  export LC_MEASUREMENT=en_US.UTF-8
  export LC_IDENTIFICATION="en_US.UTF-8"
}

stdin_type() {
  stdin="$(ls -l /dev/stdin)"
  stdin="${stdin/*-> /}"
  case "$stdin" in
    /dev/pts/[0-9]*)
      return terminal
      ;;
    pipe:\[*)
      return pipe
      ;;
  esac
  return unknown
}

function gotify() {

  if [ -z "${GOTIFY_TOKEN}" ]; then
    printf "[ERROR] no \$GOTIFY_TOKEN configured!\n" >&2
    return 1
  fi

  title="$(</etc/hostname)"
  if [ "$1" = "-t" ]; then
    title="$title: $2"
    shift 2
  fi

  message="$*"
  if [ "$message" = '-' ] || [ -z "$message" ]; then
    message="$(</dev/stdin)"
  fi

  curl_output="$(
    curl -sX POST "https://push.guvernator.net/message?token=${GOTIFY_TOKEN}" \
      -F "title=$title" \
      -F "priority=8" \
      -F "message=$message"
  )"
  curl_status=$?
  if [ $curl_status -ne 0 ]; then
    printf '[ERROR] gotify message failed to send:\n%s\n' "$curl_output" >&2
  fi
  return $curl_status
}

# prefix a command with `report` and a report will be pushed to Gotify when the
# command completes if it takes more than three seconds
function report() {
  cmd="$*"

  if [ -z "${GOTIFY_TOKEN}" ]; then
    printf "No \$GOTIFY_TOKEN configured! Not running the command!\n" >&2
    return 1
  fi

  # get start time
  t1=$(date -u +%s)

  # run the command
  "$@"
  cmd_status=$?

  # send if the command was slower than 2 seconds
  t2=$(date -u +%s)
  let "dt = t2 - t1"
  if [ $dt -lt 3 ]; then
    return
  fi

  # generate a message based on the command's exit status
  cmd_name="$1"
  if [ "$cmd_name" = "sudo" ]; then
    cmd_name="$2"
  fi

  if [ $cmd_status -eq 0 ]; then
    title="${cmd_name} ok"
    msg="Completed OK after ${dt} seconds"
  else
    title="${cmd_name} failed"
    msg="Failed ($?) after ${dt} seconds"
  fi

  printf '%s\n' "$msg" >&2

  # send a message to Gotify
  gotify -t "${title}" "${msg}: ${cmd}"
  gotify_status=$?

  if [ $gotify_status -eq 0 ]; then
    printf "Report pushed!\n" >&2
  else
    printf "Report failed to send to gotify (curl status $?)! Command took ${dt} seconds.\n" >&2
    return 1
  fi
}

function _startswith() {
  usage="Usage: $0 STRING PREFIX"
  string="${1:?$usage}"
  prefix="${2:?$usage}"

  case "$string" in
      "$prefix"*)
          true
          ;;
      *)
          false
          ;;
  esac
}

function _endswith() {
  usage="Usage: $0 STRING SUFFIX"
  string="${1:?$usage}"
  suffix="${2:?$usage}"

  case "$string" in
      *"$suffix")
          true
          ;;
      *)
          false
          ;;
  esac
}

giti() {(
  while
    printf '> git '
    read line
  do

    # some commands are treated as non-git commands
    if _startswith "$line " 'cd ' || _startswith "$line " 'ls ' || _startswith "$line " 'mkdir '; then
      printf "\033[1A\033[2K> $line\n"
      eval "$line"

    # exit is an alias for ctrl-d
    elif [ 'exit' = "$line" ]; then
      break

    # most commands become git commands
    else
      eval "git $line"
    fi
  done

  # ctrl-d triggers an "exit"
  printf "\033[2K\r> exit\n"
)}

function spectrogram() {
  [ $# -ne 2 ] && printf "Usage: $0 <mp3 input file> <mp4 output file>\n" && return 1

  ffmpeg -i "$1" -filter_complex \
    "[0:a]showspectrum=s=854x480:mode=combined:slide=scroll:saturation=0.2:scale=log,format=yuv420p[v]" \
    -map "[v]" -map 0:a \
    -b:v 700k -b:a 360k "$2"
}

function vectorscope() {
  [ $# -ne 2 ] && printf "Usage: $0 <mp3 input file> <mp4 output file>\n" && return 1

  ffmpeg -i "$1" -filter_complex \
    "[0:a]avectorscope=s=480x480:zoom=1.5:rc=200:gc=200:bc=200:rf=40:gf=40:bf=40,format=yuv420p[v]; \
    [v]pad=854:480:187:0[out]" \
    -map "[out]" -map 0:a \
    -b:v 700k -b:a 360k "$2"
}

function wave_line() {
  [ $# -ne 2 ] && printf "Usage: $0 <mp3 input file> <mp4 output file>\n" && return 1

  ffmpeg -i "$1" -filter_complex \
    "[0:a]showwaves=mode=point:s=hd480:colors=White[v]" \
    -map "[v]" -map 0:a -pix_fmt yuv420p \
    -b:a 360k -r:a 44100 "$2"
}

function wave_filled() {
  [ $# -ne 2 ] && printf "Usage: $0 <mp3 input file> <mp4 output file>\n" && return 1

  ffmpeg -i "$1" -filter_complex \
    "[0:a]showwaves=mode=cline:s=hd480:colors=White[v]" \
    -map "[v]" -map 0:a -pix_fmt yuv420p \
    -b:a 360k -r:a 44100 "$2"
}

function blank() {
  [ $# -ne 2 ] && printf "Usage: $0 <mp3 input file> <mp4 output file>\n" && return 1

  ffmpeg -i "$1" -filter_complex \
    "color=c=black:s=hd480:r=1[v]" \
    -map "[v]" -map 0:a -pix_fmt yuv420p \
    -b:a 360k -r:a 44100 -shortest "$2"
}

git-old-remote-branches() {
  remote=origin
  branch=develop

  case $# in
    0)
      ;;
    1)
      remote=origin
      branch="$1"
      ;;
    2)
      remote="$1"
      branch="$2"
      ;;
    *)
      return 1
      ;;
  esac

  git branch --all --sort=committerdate "--merged=$remote/$branch" | sed '/[ \/]'"$branch"$'/d' | sed 's:^\s*::g'
}

new-repo() {
  ssh git.guvernator.net env -C /usr/share/gitweb/src/ git init --bare "$1"
  echo "ssh://git.guvernator.net/usr/share/gitweb/src/$1"
}

function _in() {
  local e match="$1"
  shift
  for e; do
      [ "$e" = "$match" ] && return 0
  done
  return 1
}

phoenix() {(
  trap true INT
  while
    "$@" && sleep 1
  do
    continue
  done
)}

function args() {
  local arg
  for arg; do
    printf "\"$arg\"\n"
  done
}

function statusbar() {
  if ip addr | grep -F nordvpn- > /dev/null; then
    printf "vpn ok"
  else
    printf "no vpn!"
  fi

  printf " | "

  printf %s "$(uptime | sed "s@^.*load average: \(.*\), \(.*\), \(.*\)@\1 \2 \3@")"

  printf " | "

  date "+%Y-%m-%d %H:%M"
}

# show only stdin lines matching a tag, but remove the tag itself
function tagged() {(
  while read line; do
    unset spaces

    # get part before tag, maybe with space
    prefix="${line%%" $*"*}"
    if [ "$prefix" = "$line" ]; then
      prefix="${line%%"$*"*}"
    else
      spaces=x
    fi

    if [ "$prefix" != "$line" ]; then

      # get part after tag, maybe with space
      suffix="${line#*"$* "}"
      if [ "$suffix" = "$line" ]; then
        suffix="${line#*"$*"}"
      else
        spaces=x$spaces
      fi

      if [ $spaces = xx ]; then
        printf '%s %s\n' "$prefix" "$suffix"
      else
        printf '%s%s\n' "$prefix" "$suffix"
      fi
    fi
  done
)}

function certbot-list() {
    sudo certbot certificates 2> /dev/null | grep 'Domains: ' | sed 's/^.*Domains: //'
}

function certbot-add() {
    sudo certbot -d "$(certbot-list | head -n 1 | tr ' ' ,),$*" --expand
}

function tmux-detached() {
    hash tmux >/dev/null && tmux list-sessions 2>/dev/null | grep -ve '(attached)$' | grep -oe '^[0-9]\+:'
}

function tmux-resume() {
    sid="$1"
    if [ -z "$sid" ]; then
      sid="$(tmux-detached | head -n 1)"
      if [ -z "$sid" ]; then
        echo 'No detached tmux session to resume!' >&2
        return 1
      fi
    fi

    # if not in a tmux session, just attach directly
    [ -z "$TMUX" ] && exec tmux attach-session -t "$sid"

    cid="$(tmux display-message -p '#{client_name}')"
    tmux set-option -t "$cid" destroy-unattached on
    tmux switch-client -c "$cid" -t "$sid"
}

function docker-ip() {
  usage="$0 CONTAINER [NETWORK]"
  container="${1:?$usage}"
  network="$2"
  if [ -z "$2" ]; then
    network=bridge
  fi

  docker inspect -f '{{ $net := index .NetworkSettings.Networks "'"$network"'" }}{{$net.IPAddress }}' "$container"
}

function mastovid() {
  [ $# -ne 2 ] && printf "Usage: $0 <mp4 input file> <mp4 output file>\n" && return 1
  ffmpeg -i "$1" -vf "scale=iw/2:ih/2" -vcodec libx264 -crf 24 "$2" && ls -lh "$2"
}

# require nm connection to be up to run this command, but take connection down once all such commands are complete
with_nm_connection() {(
  set +e

  working_dir=/tmp/with_nm_connection
  connection="$1"; shift

  mkdir -p "$working_dir"
  counter="$working_dir/$connection.counter"
  lock="$working_dir/$connection.lock"

  (flock --timeout 1 9
    if ! [ -f "$counter" ]; then
      echo 1 > "$counter"
      nmcli c up "$connection"
    else
      n="$(cat "$counter")"
      n=$(($n + 1))
      printf '%s\n' "$n" > "$counter"
    fi
  ) 9>"$lock"

  "$@"
  r=$?

  (flock --timeout 1 9
    n="$(cat "$counter")"
    if [ "$n" -eq 1 ]; then
      nmcli c down "$connection"
      rm "$counter"
    else
      n=$(($n - 1))
      printf '%s\n' "$n" > "$counter"
    fi
  ) 9>"$lock"

  return $r
)}

lxc_connect () {
  container="$1"
  shift

  # connect to container on test infrastructure
  if [ "${container#test-}" != "${container}" ]; then
    if [ -z "$(nmcli -f GENERAL.STATE c show Surfly)" ]; then
      disable_vpn_when_done=true
      printf "Enabling Surfly VPN..."
      out="$(nmcli connection up Surfly 2>&1)"
      err=$?
      if [ $err -eq 0 ]; then
        printf "\r                      \r"
      else
        printf '%s\n' ' failed!' "$out"
        return $err
      fi
    fi

    printf "Connecting...\r"
    ssh_err=0
    ssh ti-wake -t lxc exec "${container}" -- su --login client 2>/dev/null
    ssh_err=$?
    if [ $ssh_err -ne 0 ]; then
      printf 'failed!\n'
    fi

    if [ "$disable_vpn_when_done" = true ]; then
      printf "Disabling Surfly VPN..."
      out="$(nmcli connection down Surfly 2>&1)"
      err=$?
      if [ $err -eq 0 ]; then
        printf "\r                       \r"
      else
        printf '%s\n' ' failed!' "$out"
        return $err
      fi
    fi

    return $ssh_err
  fi

  # try to start local container if it doesn't exist already
  if lxc info "$container" | grep 'Status: Stopped' >/dev/null; then
    printf "Starting..."
    out="$(lxc start "$container" 2>&1)"
    if [ $? -ne 0 ]; then
      printf " failed!\n$out"
      return 1
    fi
    printf "\r           \r"
  fi

  # restore container to a snapshot called 'clean'
  if [ "$*" = clean ]; then
    printf %s "You're sure? (type yes) " >&2
    read line
    [ "$line" = yes ] || return 1
    lxc restore "$container" clean

  # connect a shell to the tty or run a command
  elif [ $# -eq 0 ]; then
    lxc exec "$container" -- su --login "$USER"

  # run a command in the tty
  else
    lxc exec "$container" -- sudo -u "$USER" $*
  fi
}

ala() {
  if [ "$#" -lt 2 ]; then
    printf 'Usage: ala [--save] VERSION PKGS...\n'
    return 1
  fi

  save=false
  if [ "$1" = '--save' ]; then
    save=true
    shift
  fi

  version="$1"
  shift

  if [ "$save" = true ]; then
    _ala_filenames "$save" "$version" "$@" | while read url; do
      printf '%s\n' "${url##*/}"
      curl --progress-bar --remote-name "$url"
    done
  else
    _ala_filenames "$save" "$version" "$@" | xargs -o sudo pacman -U
  fi
}

# $1 save (true or false)
# $2 version
# $3... pkgs
_ala_filenames() {
  save="$1"
  shift

  version="$1"
  shift

  while [ "$#" -ne 0 ]; do
    pkg="$1"
    first_letter="$(printf '%.1s' "$pkg")"
    url="$(printf 'https://archive.archlinux.org/packages/%s/%s/%s-x86_64.pkg.tar.zst' "$first_letter" "$pkg" "$pkg-$version")"
    printf '%s\n' "$url"
    if [ "$save" = 'true' ]; then
      printf '%s.sig\n' "$url"
    fi
    shift
  done
}

stripdir() {
  if [ $# -ne 1 ]; then
    printf 'Usage: stripdir DIR\n' >&2
    return 1
  fi

  dir="$(realpath "$1")"
  dirp="$(dirname "$dir")"

  find "$dir" -mindepth 1 -maxdepth 1 -print0 | xargs -0 mv -it "$dirp"
  rmdir "$dir"
}

# adapted from https://tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html
colortest() {
  T="  ${*:-OwO}  "
  ansi_fwd="\x1b[%sC"

  # move cursor to second column
  printf "$ansi_fwd" 9

  # move cursor to third column
  printf "$ansi_fwd" "${#T}"

  # print each column label
  left_pad="$(( (${#T} - 3) / 2))"
  right_pad="$(( ${#T} - 2 - $left_pad ))"
  for col in $(seq 40 47); do
    printf "$ansi_fwd" "$left_pad"
    printf '%sm' "$col"
    printf "$ansi_fwd" "$right_pad"
  done

  printf '\n'

  for fg_color in '' $(seq 30 37); do
    for fg_bold in 0 1; do
      FG="$fg_bold;$fg_color"
      FG="${FG%;}"
      FG="${FG#0;}"
      printf '%6sm \x1b[%sm%s' "$FG" "$FG" "$T"
      for BG in $(seq 40 47); do
        printf ' \x1b[%s;%sm%s\x1b[0m' "$FG" "$BG" "$T"
      done
      printf '\n'
    done
  done
}

swayw() {
  swaymsg -t get_tree | jq '
    recurse(.nodes[], .floating_nodes[])
    | select(.type == "floating_con" or .type == "con")
    | select(.nodes | length == 0)
    | select(.floating_nodes | length == 0)
  '
}

_modal_filter_end() {
    mode="$1"
    case "$mode" in
        rewrite)
            printf '\e[1K\r' >&2
            ;;
    esac
}

modal_filter() {
    if [ "$#" -ne 7 ]; then
        printf 'Usage:\n\tmodal_filter INIT_MODE --rewrite-after LINE --bypass-after LINE --swallow-after LINE\n' 2>&1
        return 16
    fi

    mode="$1"
    rewrite_after="$3"
    bypass_after="$5"
    swallow_after="$7"

    while read line; do

        # maybe detect mode change
        new_mode=
        case "$line" in
            "$rewrite_after")
                new_mode=rewrite
                ;;
            "$bypass_after")
                new_mode=bypass
                ;;
            "$swallow_after")
                new_mode=swallow
                ;;
        esac
        if [ -n "$new_mode" ]; then
            _modal_filter_end "$mode"
            mode="$new_mode"
            continue
        fi

        # handle text in current mode
        case "$mode" in
            rewrite)
                printf '\e[1K\r%s' "$line" >&2
                ;;
            bypass)
                printf '%s\n' "$line"
                ;;
            swallow)
                ;;
        esac
    done
    _modal_filter_end "$mode"
}

iperf3_filter() {
    modal_filter \
        rewrite \
        --rewrite-after '' \
        --bypass-after  '- - - - - - - - - - - - - - - - - - - - - - - - -' \
        --swallow-after 'iperf Done.'
}

_sleep() {
    seconds="$1"
    shift
    msg="${*:-sleeping for}"

    for i in $(seq "$seconds" -1 1); do
        plural=s
        if [ $i -eq 1 ]; then
            plural=
        fi
        printf '%s %d more second%s...' "$msg" "$i" "$plural"
        sleep 1
        printf '\e[1K\r'
    done

    printf '(slept for %d seconds)\n' "$seconds"
}

is_pipe_empty() {
    ret=0
    while read line; do
        ret=1
        printf '%s\n' "$line"
    done
    return "$ret"
}

_iperf3() {
    backoff=1
    while stdbuf -i0 -o0 -e0 iperf3 "$@" | iperf3_filter | is_pipe_empty; do
        _sleep "$backoff" 'retrying after'
        backoff=$(($backoff * 2))
        printf 'retrying...\n'
    done
}

speedtest() {
    printf 'download:\n'
    _iperf3 --client speedtest.wtnet.de --port 5200 --version4 --parallel 1

    printf '\nupload:\n'
    _iperf3 --client speedtest.wtnet.de --port 5200 --version4 --parallel 1 --reverse
}
