[user]
	name = Quint Guvernator
	email = quint@guvernator.net
[grep]
	extendRegexp = true
	lineNumber = true
[init]
	templatedir = ~/.config/git/template
	defaultBranch = main
[sendemail]
	from = Quint Guvernator <quint@guvernator.net>
	smtpserver = mail.privateemail.com
	smtpuser = quint@guvernator.net
	chainreplyto = false
	smtpserverport = 587
	smtpencryption = tls
	confirm = auto
[alias]
	# simple typing shortcuts
	sw = switch
	c = commit
	ff = merge --ff-only
	lo = log --oneline
	refgraph = log --graph --decorate --pretty=oneline --abbrev-commit --simplify-by-decoration --simplify-merges
	rc = rebase --continue

	# submit patch to lkml
	lmkl = send-email --annotate --cover-letter --signoff

	# more useful `git grep`
	g = grep --break --heading --line-number

	# ignore changes to an already-tracked file
	ignore = update-index --assume-unchanged
	track = update-index --no-assume-unchanged
	ignored = "!f() { git ls-files -v \"$@\" | sed -n 's:^h ::p'; }; f"

	# more comprehensive commit log
	flog = log --decorate --notes --stat

	# show which files are tracked
	ls = ls-tree --name-only HEAD

	# a pretty log that shows branches, merge history, and tags
	graph = log --graph --decorate --pretty=oneline --abbrev-commit
	ga = log --all --graph --decorate --pretty=oneline --abbrev-commit

	# alter last commit to incorporate currently staged changes
	whoops = commit --amend --no-edit

	# move a tag to a ref (default HEAD) and push to a remote (default "origin")
	release = "!f(){ git tag -f \"${1:?'Usage: git release TAG [REMOTE] [REF]'}\" \"${3:-HEAD}\" \"$@\" && git push -f \"${2:-origin}\" \"$1\"; }; f"

	# list named parents of current HEAD; this is one way to find out if a branch has been merged into this one
	ancestors="!f() { git branch --merged \"$@\" | sed -n 's:^  ::p'; }; f"

	# add/update a subtree as easily as a submodule
	sub-add = "!f() { usage='Usage: git sub-add REPO_URL REF SUBDIR'; repo_link=\"${1:?$usage}\"; shift; ref=\"${1:?$usage}\"; shift; subdir=\"${1:?$usage}\"; shift; git subtree add --prefix \"$subdir\" \"$repo_link\" \"$ref\" --squash \"$@\"; }; f"
	sub-update = "!f() { usage='Usage: git sub-update REPO_URL REF SUBDIR'; repo_link=\"${1:?$usage}\"; shift; ref=\"${1:?$usage}\"; shift; subdir=\"${1:?$usage}\"; shift; git subtree pull --prefix \"$subdir\" \"$repo_link\" \"$ref\" --squash \"$@\"; }; f"

	# push to all remotes; takes all regular push arguments
	push-all = "!f() { git remote | while read line; do git push \"$line\" \"$@\" || return 1; done; }; f"

	# start a git daemon on remote server $1 from remote git dir $2 and
	# make it accessible as if it were run on the local machine
	remote-daemon="!f() { usage='Usage: git remote-daemon SERVER REMOTE_GIT_DIR'; ssh -L 9418:localhost:9418 \"${1:?$usage}\" git daemon --export-all --base-path=\"$(dirname \"${2:?$usage}\")\" \"$@\"; }; f"

	# Get the child commit of the current commit.
	# Use $1 instead of 'HEAD' if given. Use $2 instead of curent branch if given.
	# (source unknown)
	child = "!f() {bash -c 'git log --format=%H --reverse --ancestry-path ${1:-HEAD}..${2:\"$(git rev-parse --abbrev-ref HEAD)\"} | head -1' -}; f"

	# For the current (or specified) commit-ish, get the all children
	# (source unknown)
	children = "!f() {bash -c 'c=${1:-HEAD}; set -- $(git rev-list --all --not \"$c\"^@ --children | grep $(git rev-parse \"$c\") ); shift; echo $*' -}; f"

[interactive]
	singlekey = true
[http]
	postBuffer = 524288000
[core]
	autocrlf = input
	editor = nvim
	abbrev = 12
[push]
	default = current
[hub]
	protocol = ssh
[credential]
	helper = cache
[pretty]
	fixes = Fixes: %h (\"%s\")
[merge]
	tool = meld
[fetch]
	recurseSubmodules = on-demand
	parallel = 8
[submodule]
	recurse = true
[pull]
	ff = only
